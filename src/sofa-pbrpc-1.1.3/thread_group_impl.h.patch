--- backup/sofa-pbrpc-1.1.3/src/sofa/pbrpc/thread_group_impl.h	2017-01-20 11:25:28.000000000 +0800
+++ src/sofa-pbrpc-1.1.3/src/sofa/pbrpc/thread_group_impl.h	2019-04-03 16:01:37.000000000 +0800
@@ -11,6 +11,8 @@
 
 #include <boost/bind.hpp>
 
+#include <sofa/pbrpc/mutex_lock.h>
+#include <sofa/pbrpc/condition_variable.h>
 #include <sofa/pbrpc/io_service.h>
 #include <sofa/pbrpc/ext_closure.h>
 
@@ -36,6 +38,7 @@ public:
         ThreadDestFunc dest_func;
         bool init_done;
         bool init_fail;
+        ConditionVariable* group_cond; // notify thread-group
 
         ThreadParam() : id(0), io_service(NULL), init_func(NULL), dest_func(NULL),
             init_done(false), init_fail(false) {}
@@ -110,6 +113,7 @@ public:
             _thread_params[i].io_service = &_io_service;
             _thread_params[i].init_func = _init_func;
             _thread_params[i].dest_func = _dest_func;
+            _thread_params[i].group_cond = &_cond;
             int ret = pthread_create(&_threads[i], NULL, &ThreadGroupImpl::thread_run, &_thread_params[i]);
             if (ret != 0)
             {
@@ -127,6 +131,8 @@ public:
         bool init_fail = false;
         while (true)
         {
+        	_mux.lock();
+        	_cond.wait(_mux, 1); //wait 1 ms
             int done_num = 0;
             for (int i = 0; i < _thread_num; ++i)
             {
@@ -135,6 +141,7 @@ public:
                     if (_thread_params[i].init_fail)
                     {
                         init_fail = true;
+                        _mux.unlock();
                         break;
                     }
                     else
@@ -145,9 +152,10 @@ public:
             }
             if (init_fail || done_num == _thread_num)
             {
+            	_mux.unlock();
                 break;
             }
-            usleep(100000);
+            _mux.unlock();
         }
         if (init_fail)
         {
@@ -255,6 +263,8 @@ private:
             thread_param->init_fail = true;
         }
         thread_param->init_done = true;
+        thread_param->group_cond->signal();
+
         // run asio
         if (!thread_param->init_fail)
         {
@@ -284,6 +294,8 @@ private:
     std::string _name;
     ThreadInitFunc _init_func;
     ThreadDestFunc _dest_func;
+    ConditionVariable _cond;
+    MutexLock _mux;
 
     IOService _io_service;
     IOServiceWork* _io_service_work;
